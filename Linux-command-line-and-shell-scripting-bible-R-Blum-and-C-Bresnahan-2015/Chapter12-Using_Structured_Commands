#!/bin/bash


###########################################################################################################
# CHAPTER 12: 
# Using Structured Commands
#
#
# INDEX:
# for
# while
# until
# looping through files, using IFS (internal field separator)
# looping: break
# looping: continue
# looping: practical example: executable files in $PATH folders
#
#
######################################## for
#					
#	syntax:
#	for var in list
#	do
#		commands
#	done
#
#	simple example:
	list="one two three four five"

	for count in $list
	do
		echo "count is $count"
	done
	
#	file globbing example:
	for file in /home/main/* /home/main/.*
	do
		if [ -d "$file" ]
		then
			echo "$file is a dir"
		elif [ -f "$file" ]	# note: "" around the $file allows for spaces in names
		then
			echo "$file is a file"
		else
			echo "$file doesn't exist..."
		fi
	done
#
#	C-style for loops are also possible:
#	syntax:
#	for (( a = 1; a < 10; a++ ))
#
#	for example,
	for (( i=1; i<10; i++ ))
	do
		echo "C-style for iteration of i: $i"
	done
#
#
######################################## while
#
#	basic while syntax:
#
#	while test command
#	do
#		other commands
#	done
#
#	for example:
	var1=10
	
	while [ $var1 -gt 0 ]
	do
		echo $var1
		var1=$[ $var1 - 1 ]
	done
#
#
######################################## until
#
#	As long as the exit status of the test command is non-zero, the bash shell executes
#	the commands listed in the loop.
#
#	basic syntax:
#	until test commands
#	do
#		other commands
#	done
#
#	for example:
	var1=100

	until [ $var1 -eq 0 ]
	do
		echo $var1
		var1=$[ $var1 - 25 ]
	done
#
#
#
#
######################################## looping through files, using IFS (internal field separator)
#
#	default IFSs are: space, tab, newline
#
#	the practical thing to do is to save the IFS var and then restore it after use:
#
#	IFS.OLD=$IFS
#	IFS=$‘∖n’
#	# use the new IFS value in code
#	IFS=$IFS.OLD
#
#
#	for example:
	IFS.OLD=$IFS
	IFS=$'\n'

	for entry in $(cat /etc/passwd)
	do	
		echo "entry with IFS=$'\n' (newline) is: $entry"
		IFS=:
		for value in $entry
		do
			echo "value in \$entry with IFS=: : $value"
		done
	done

	IFS=$IFS.OLD
#
#
######################################## looping: break
#
#	break -- exit loop, for example:
	
	for var in 1 2 3 4 5
	do
		if [ $var -eq 3 ]
		then
			echo "\$var -eq 3"
			break
		fi
		
		echo "before break $var is.... "
	done
		echo "done..."
#
#
#	in nested loops, break can control which loop is terminated (inner/outer) with -n 
#	as loop nr; default n=1, for example:

	for (( i=0; i < 5; i++ ))
	do
		echo "for-loop 1: $i"
		for (( k=0; k<20; k++ ))
		do
			if [ $k -gt 5 ]
			then
				break 2 # break outer look
			fi
		
			echo "forloop 2: $k"
		done
	done
#
#
#
######################################## looping: continue
#
#	The continue command is a way to prematurely stop processing commands inside of a loop but	#	not terminate the loop completely.
#
#	Simply, continue skips the rest of the commands in the loop, but keeps the loop going.

	for (( k=0; k<20; k++ ))
	do
		if [ $k -gt 5 ] && [ $k -lt 10 ]
		then
			continue	# [ $k -gt 5 ] && [ $k -lt 10 ] are skipped
		fi
		
		echo "for-loop 1: $k"
	done # > output.xtx # this saves the output into the textfile
	     # | sort 	    # piping works in the same way
	

#
#
######################################## looping: practical example: executable files in $PATH folders
#
#	(VBA-style comma-separated format with IFS and for loops)
#	(see separate file: Chap13PATHsearch)	
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#	
###########################################################################################################

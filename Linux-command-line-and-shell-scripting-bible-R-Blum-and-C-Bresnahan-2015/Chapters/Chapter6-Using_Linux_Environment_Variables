#!/bin/bash

###########################################################################################################
# CHAPTER 6: 
# Using Linux Environment Variables
#
# INDEX:
# global and local env vars: intro
# setting local user-defined vars
# setting global user-defined vars
# Locating System Environment Variables
# Making environment variables persistent
# var arrays
#
#
###################################### global and local env vars: intro
#
#	Global environment variables are visible from the shell session and from any spawned child 
#	subshells. Local variables are available only in the shell that creates them.
#
#	printenv : prints the global env vars
#
#	can also use the echo command with $[ENVVAR]to display a variable's value:
#	echo $HOME
#
#	set : prints both global and local env vars, as well as user-defined vars
#
#
###################################### setting local user-defined vars
#
#	local env vars are local to the sub-shell only, and are set with = and ref'ed with $:
#	myvar="hello world"
#	echo $myvar
#	
#	(note: "" are needed with spaces, not without)
#
###################################### setting global user-defined vars
#
#	simply export the local env var to make it global:
#	myvar="hello world"
#	export myvar
#
#	note: Changing a global environment variable within a child shell does not affect the variable's #	value in the parent shell.
#
#	note: unsetting an env var is done with unset [env_var]
#
#
###################################### Locating System Environment Variables
#
#	the system env vars are loaded depending on the start method of the shell:
#	1) default login 
#	2) interactive shell, started with a bash sub-shell;
#	   doesn't process the /etc/profile, only the $HOME/.bashrc
#	3) non-interactive shell
#	   looks for BASH_ENV path to execute startup file, which typically includes envs, aliases, etc.
#	   if BASH_ENV isn't set, local vars are inherited from parent shell
#
#
#	1) default login shell: typically, loads these files to process commands from:
#	/etc/profile
#	$HOME/.bash_profile
#	$HOME/.bashrc
#	$HOME/.bash_login
#	$HOME/.profile
#
#	the /etc/profile:
#	this is the default startup file, loaded for all users at login;
#	whenever you log in to the Linux system, bash executes the commands in
#	the /etc/profile startup file first.
#
#	each Linux distro has different /etc/profile settings and commands;
#
#	in Ubuntu, /etc/bash.bashrc contains the sys env vars
#	in Ubuntu, and other distros, the /etc/profile file has a for statement that iterates 
#	through the /etc/profile.d dir
#
#	next,
#	one of these:
#	$HOME/.bash_profile
#	$HOME/.bash_login
#	$HOME/.profile
#
#	is run; and $HOME/.bashrc is run from one of the other files.
#	(note: the dot (.) signifies that the files are hidden in the $HOME dir ;
#	       to display hidden files, use ls -a param)
#
#	$HOME/.bashrc contains info on how to store aliases:
#	# Alias definitions.
# 	# You may want to put all your additions into a separate file like
# 	# ~/.bash_aliases, instead of adding them here directly.
# 	# See /usr/share/doc/bash-doc/examples in the bash-doc package.
#
#
###################################### Making environment variables persistent
#
#	as both global and local user-defined env vars are deleted after closing of shell(s),
#	to make them persistent, they need to be stored in a file
#
#	On most distributions, the best place to store an individual user's persistent bash shell
#	variables is in the $HOME/.bashrc file. This is true for all shell process types. 
#
#	However, if the BASH_ENV variable is set, keep in mind that unless it points to $HOME/.bashrc , #	you may need to store a user's variables for non-interactive shell types elsewhere.
#
#
#
###################################### var arrays
#
#	arrays are created as:
#	my_array=(one two three)
#
#	and retrieved as:
#	echo ${my_array[2]}
#
#	or, for all array items with *:
#	echo ${my_array[*]}
#
#
#
#
#
#
#
#
#
###########################################################################################################
